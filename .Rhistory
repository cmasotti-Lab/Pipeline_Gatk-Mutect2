# Exemplo de um dataframe com várias colunas de valores
dados <- data.frame(
Coluna1 = c(10, 20, 30, 40),
Coluna2 = c(15, 25, 35, 45)
)
# Converter o dataframe em uma matriz
matriz_dados <- as.matrix(dados)
# Use a função prop.table para calcular a abundância relativa por coluna
abundancia_relativa <- prop.table(matriz_dados, margin = 2)
# Imprima a abundância relativa
print(abundancia_relativa)
# Exemplo de um dataframe com várias colunas de valores
dados <- data.frame(
Coluna1 = c(10, 20, 30, 20),
Coluna2 = c(15, 25, 35, 45)
)
# Converter o dataframe em uma matriz
matriz_dados <- as.matrix(dados)
# Use a função prop.table para calcular a abundância relativa por coluna
abundancia_relativa <- prop.table(matriz_dados, margin = 2)
# Imprima a abundância relativa
print(abundancia_relativa)
# Exemplo de um dataframe com várias colunas de valores
dados <- data.frame(
Coluna1 = c(10, 20, 20, 20),
Coluna2 = c(15, 25, 35, 45)
)
# Converter o dataframe em uma matriz
matriz_dados <- as.matrix(dados)
# Use a função prop.table para calcular a abundância relativa por coluna
abundancia_relativa <- prop.table(matriz_dados, margin = 2)
# Imprima a abundância relativa
print(abundancia_relativa)
10/70
d
# Exemplo de um dataframe com várias colunas de valores
dados <- data.frame(
Coluna1 = c(10, 20, 20, 20),
Coluna2 = c(15, 25, 35, 45)
)
# Converter o dataframe em uma matriz
matriz_dados <- as.matrix(dados)
# Use a função prop.table para calcular a abundância relativa por coluna
abundancia_relativa <- prop.table(matriz_dados, margin = 2)
View(dados)
10/70
15+25+35+45
15/120
# Imprima a abundância relativa
print(abundancia_relativa)
# Exemplo de uma matriz de dados
dados <- matrix(c(10, 20, 30, 40, 15, 25, 35, 45), nrow = 2)
# Normalizar por colunas (z-score)
dados_normalizados_colunas <- scale(dados, center = TRUE, scale = TRUE)
# Imprimir a matriz normalizada por colunas
print(dados_normalizados_colunas)
View(dados_normalizados_colunas)
View(dados)
View(dados_normalizados_colunas)
10/30
30/70
# Exemplo de uma matriz de dados
dados <- matrix(c(10, 20, 30, 40, 15, 25, 35, 45), nrow = 2)
# Normalizar por colunas (z-score)
dados_normalizados_colunas <- scale(dados, center = TRUE, scale = TRUE)
# Exemplo de uma matriz de dados
dados <- matrix(c(10, 20, 30, 40, 15, 25, 35, 45), nrow = 2)
# Normalizar por colunas (z-score)
dados_normalizados_colunas <- scale(dados, center = TRUE, scale = TRUE)
# Imprimir a matriz normalizada por colunas
print(dados_normalizados_colunas)
# Converter o dataframe em uma matriz
matriz_dados <- as.matrix(dados_normalizados_colunas)
# Use a função prop.table para calcular a abundância relativa por coluna
abundancia_relativa <- prop.table(matriz_dados, margin = 2)
# Imprima a abundância relativa
print(abundancia_relativa)
View(abundancia_relativa)
View(dados_normalizados_colunas)
# Exemplo de uma matriz de dados
dados <- matrix(c(10, 20, 30, 40, 15, 25, 35, 45), nrow = 2)
# Normalizar por colunas (z-score)
dados_normalizados_colunas <- scale(dados, center = TRUE)
# Imprimir a matriz normalizada por colunas
print(dados_normalizados_colunas)
# Converter o dataframe em uma matriz
matriz_dados <- as.matrix(dados_normalizados_colunas)
# Use a função prop.table para calcular a abundância relativa por coluna
abundancia_relativa <- prop.table(matriz_dados, margin = 2)
# Imprima a abundância relativa
print(abundancia_relativa)
View(abundancia_relativa)
View(dados)
View(dados_normalizados_colunas)
dados <- matrix(c(10, 20, 30, 40, 15, 25, 35, 45), nrow = 2)
# Calcular a mediana das linhas
median_linhas <- apply(dados, 1, median)
# Imprimir as medianas das linhas
print(median_linhas)
10+30+15+35
90/5
# Exemplo de um dataframe
dados <- data.frame(
Coluna1 = c(10, 20, 30, 40),
Coluna2 = c(15, 25, 35, 45)
)
# Converter o dataframe em uma matriz
matriz_dados <- as.matrix(dados)
# Calcular a mediana das linhas
median_linhas <- apply(matriz_dados, 1, median)
# Imprimir as medianas das linhas
print(median_linhas)
# Exemplo de um dataframe
dados <- data.frame(
Coluna1 = c(10, 20, 30, 40),
Coluna2 = c(15, 25, 35, 45)
)
# Calcular a mediana das linhas e atribuir a uma nova coluna
dados$MedianaLinhas <- rowMeans(dados)
# Imprimir o dataframe com a nova coluna de medianas
print(dados)
25/2
library(org.Hs.eg.db)
seus_genes <- c("ENSG00000141510", "ENSG00000284757", "ENSG00000022556")
# Obtendo informações de anotação para esses genes
anotacoes <- select(org.Hs.eg.db, keys = seus_genes, columns = c("SYMBOL", "ENTREZID", "GENENAME"))
# Visualizando as informações de anotação
print(anotacoes)
library(org.Hs.eg.db)
seus_genes <- c("ENSG00000141510", "ENSG00000284757", "ENSG00000022556")
# Obtendo informações de anotação para esses genes
anotacoes <- select(org.Hs.eg.db, keys = seus_genes, columns = c("SYMBOL", "ENTREZID", "GENENAME"))
# Obtendo informações de anotação para esses genes
anotacoes <- select(org.Hs.eg.db, keys = seus_genes, columns = c("SYMBOL", "GENENAME"))
# Obtendo informações de anotação para esses genes
anotacoes <- select(org.Hs.eg.db, keys = seus_genes, columns = c("SYMBOL", "GENENAME"))
seus_genes <- c("TP53", "BRAF", "MTOR")
# Obtendo informações de anotação para esses genes
anotacoes <- select(org.Hs.eg.db, keys = seus_genes, columns = c("SYMBOL", "ENTREZID", "GENENAME"))
valid_keys <- keys(org.Hs.eg.db)
print(valid_keys)
seus_genes <- c("673", "680", "1011")
# Obtendo informações de anotação para esses genes
anotacoes <- select(org.Hs.eg.db, keys = seus_genes, columns = c("SYMBOL", "ENTREZID", "GENENAME"))
# Visualizando as informações de anotação
print(anotacoes)
# Carregamento de pacotes
library(AnnotationDbi)
library(org.Hs.eg.db)  # Ou o pacote org correspondente à sua espécie
# Carregue seus dados de anotação a partir do arquivo CSV
meu_banco_de_dados <- read.csv("meu_banco_de_dados.csv")
# Criação de um DataFrame de exemplo
meu_banco_de_dados <- data.frame(
gene_id = c("ENSG000001", "ENSG000002", "ENSG000003", "ENSG000004", "ENSG000005"),
gene_symbol = c("GENE1", "GENE2", "GENE3", "GENE4", "GENE5"),
description = c("Descrição do GENE1", "Descrição do GENE2", "Descrição do GENE3", "Descrição do GENE4", "Descrição do GENE5")
)
# Visualização do DataFrame
print(meu_banco_de_dados)
# Visualização do DataFrame
print(meu_banco_de_dados)
# Criação de um DataFrame de exemplo
meu_banco_de_dados <- data.frame(
gene_id = c("ENSG000001", "ENSG000002", "ENSG000003", "ENSG000004", "ENSG000005","ENSG000001", "ENSG000002",, "ENSG000005"),
gene_symbol = c("GENE1", "GENE2", "GENE3", "GENE4", "GENE5","GENE1", "GENE2", "GENE5",),
description = c("GRUPO1", "GRUPO1", "GRUPO1", "GRUPO2", "GRUPO2", "GRUPO3", "GRUPO3", "GRUPO3")
)
# Criação de um DataFrame de exemplo
meu_banco_de_dados <- data.frame(
gene_id = c("ENSG000001", "ENSG000002", "ENSG000003", "ENSG000004", "ENSG000005","ENSG000001", "ENSG000002", "ENSG000005"),
gene_symbol = c("GENE1", "GENE2", "GENE3", "GENE4", "GENE5","GENE1", "GENE2", "GENE5",),
description = c("GRUPO1", "GRUPO1", "GRUPO1", "GRUPO2", "GRUPO2", "GRUPO3", "GRUPO3", "GRUPO3")
)
# Criação de um DataFrame de exemplo
meu_banco_de_dados <- data.frame(
gene_id = c("ENSG000001", "ENSG000002", "ENSG000003", "ENSG000004", "ENSG000005","ENSG000001", "ENSG000002", "ENSG000005"),
gene_symbol = c("GENE1", "GENE2", "GENE3", "GENE4", "GENE5","GENE1", "GENE2", "GENE5",),
description = c("GRUPO1", "GRUPO1", "GRUPO1", "GRUPO2", "GRUPO2", "GRUPO3", "GRUPO3", "GRUPO3")
)
# Criação de um DataFrame de exemplo
meu_banco_de_dados <- data.frame(
gene_id = c("ENSG000001", "ENSG000002", "ENSG000003", "ENSG000004", "ENSG000005","ENSG000001", "ENSG000002", "ENSG000005"),
gene_symbol = c("GENE1", "GENE2", "GENE3", "GENE4", "GENE5","GENE1", "GENE2", "GENE5"),
description = c("GRUPO1", "GRUPO1", "GRUPO1", "GRUPO2", "GRUPO2", "GRUPO3", "GRUPO3", "GRUPO3")
)
# Visualização do DataFrame
print(meu_banco_de_dados)
# Crie um objeto OrgDb personalizado
meu_orgdb <- makeOrgDb(
orgDbName = "MeuOrgDb",
data.frame(
gene_id = meu_banco_de_dados$gene_id,
gene_symbol = meu_banco_de_dados$gene_symbol,
description = meu_banco_de_dados$description
# Adicione outras colunas de anotação conforme necessário
),
keytype = "gene_id"
)
# Crie um objeto OrgDb personalizado
meu_orgdb <- makeOrgDb(
orgDbName = "MeuOrgDb",
data.frame(
gene_id = meu_banco_de_dados$gene_id,
gene_symbol = meu_banco_de_dados$gene_symbol,
description = meu_banco_de_dados$description
# Adicione outras colunas de anotação conforme necessário
),
keytype = "gene_id"
)
setReadable(meu_banco_de_dados, keyType = "gene_id", column = "gene_symbol")
# Carregamento de pacotes
library(AnnotationDbi)
library(org.Hs.eg.db)  # Ou o pacote org correspondente à sua espécie
setReadable(meu_banco_de_dados, keyType = "gene_id", column = "gene_symbol")
library(clusterProfiler)
seus_genes <- meu_banco_de_dados$gene_id
# Realize a análise de enriquecimento funcional usando seus dados de anotação personalizados
resultado_enriquecimento <- enrichGO(
gene = seus_genes,
OrgDb = meu_banco_de_dados,
keyType = "gene_id",
ont = "BP",  # Ontologia biológica (por exemplo, BP para Processos Biológicos)
pvalueCutoff = 0.05
)
# Visualização do DataFrame
print(meu_banco_de_dados)
# Defina a chave primária (keytype) para o seu banco de dados personalizado
keytype <- "gene_id"
# Crie um objeto OrgDb personalizado
meu_orgdb <- OrgDb(
orgDbName = "MeuOrgDb",
dataSource = "Meu Banco de Dados",
species = "Homo sapiens",  # Substitua pela espécie apropriada
gene_info = meu_banco_de_dados,
keytype = keytype,
keepBuiltIn = FALSE  # Defina como FALSE para usar apenas seu banco de dados personalizado
)
library(clusterProfiler)
# Crie um objeto OrgDb personalizado
meu_orgdb <- OrgDb(
orgDbName = "MeuOrgDb",
dataSource = "Meu Banco de Dados",
species = "Homo sapiens",  # Substitua pela espécie apropriada
gene_info = meu_banco_de_dados,
keytype = keytype,
keepBuiltIn = FALSE  # Defina como FALSE para usar apenas seu banco de dados personalizado
)
# Carregue seus dados de expressão genética (substitua pelo seu próprio conjunto de dados)
seus_dados_de_expr <- read.table("seus_dados_de_expr.txt", header = TRUE, row.names = 1)
seus_dados_de_expr <- data.frame(
Gene = c("Gene1", "Gene2", "Gene3", "Gene4", "Gene5"),
Amostra1 = c(1.2, 2.5, 0.8, 3.7, 2.0),
Amostra2 = c(0.9, 1.8, 2.1, 1.0, 2.3),
Amostra3 = c(2.4, 3.1, 1.5, 2.9, 1.7)
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- gseaplot(
es = seus_dados_de_expr,
annotation = "SeuArquivoDeAnotacao.gmt",
term = "Conjunto1",  # Escolha o conjunto que deseja analisar
nPerm = 1000,  # Número de permutações
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- gseaGO(
es = seus_dados_de_expr,
annotation = "SeuArquivoDeAnotacao.gmt",
term = "Conjunto1",  # Escolha o conjunto que deseja analisar
nPerm = 1000,  # Número de permutações
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- gseGO(
es = seus_dados_de_expr,
annotation = "SeuArquivoDeAnotacao.gmt",
term = "Conjunto1",  # Escolha o conjunto que deseja analisar
nPerm = 1000,  # Número de permutações
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- gseGO(
es = seus_dados_de_expr,
OrgDb =  meu_banco_de_dados,
annotation = "SeuArquivoDeAnotacao.gmt",
term = "Conjunto1",  # Escolha o conjunto que deseja analisar
nPerm = 1000,  # Número de permutações
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- gseGO(
es = seus_dados_de_expr,
OrgDb =  meu_banco_de_dados,
annotation = "SeuArquivoDeAnotacao.gmt",
term = "Conjunto1",  # Escolha o conjunto que deseja analisar
nPerm = 1000,  # Número de permutações
keytype = "gene_id",
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- gseGO(
es = seus_dados_de_expr,
OrgDb =  meu_banco_de_dados,
annotation = "SeuArquivoDeAnotacao.gmt",
term = "Conjunto1",  # Escolha o conjunto que deseja analisar
nPerm = 1000,  # Número de permutações
keytypes = "gene_id",
pvalueCutoff = 0.05
)
# Carregamento de pacotes
library(AnnotationDbi)
library(org.Hs.eg.db)  # Ou o pacote org correspondente à sua espécie
library(clusterProfiler)
# Criação de um DataFrame de exemplo
meu_banco_de_dados <- data.frame(
gene_id = c("ENSG000001", "ENSG000002", "ENSG000003", "ENSG000004", "ENSG000005","ENSG000001", "ENSG000002", "ENSG000005"),
gene_symbol = c("GENE1", "GENE2", "GENE3", "GENE4", "GENE5","GENE1", "GENE2", "GENE5"),
description = c("GRUPO1", "GRUPO1", "GRUPO1", "GRUPO2", "GRUPO2", "GRUPO3", "GRUPO3", "GRUPO3")
)
# Visualização do DataFrame
print(meu_banco_de_dados)
# Crie um objeto OrgDb personalizado
meu_orgdb <- OrgDb(
orgDbName = "MeuOrgDb",
dataSource = "Meu Banco de Dados",
species = "Homo sapiens",  # Substitua pela espécie apropriada
gene_info = meu_banco_de_dados,
keytype = keytype,
keepBuiltIn = FALSE  # Defina como FALSE para usar apenas seu banco de dados personalizado
)
# Carregue o pacote clusterProfiler
library(clusterProfiler)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- gseaplot(
geneList = "D:/PROJETOS-HSL_BP/SeuArquivoDeAnotacao.gmt",
ont = "BP",  # Ontologia biológica (por exemplo, BP para Processos Biológicos)
pvalueCutoff = 0.05
)
gseaplot()
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- clusterProfiler::gseaplot(
geneList = "D:/PROJETOS-HSL_BP/SeuArquivoDeAnotacao.gmt",
ont = "BP",  # Ontologia biológica (por exemplo, BP para Processos Biológicos)
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- clusterProfiler::gseaplot(
geneList = "D:/PROJETOS-HSL_BP/SeuArquivoDeAnotacao.gmt",
ont = "BP",  # Ontologia biológica (por exemplo, BP para Processos Biológicos)
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional (GO)
resultados_go <- gseGO(
geneList = seus_dados_de_expr,
OrgDb = org.Hs.eg.db,  # Banco de dados específico para humanos (ou equivalente para sua espécie)
ont = "BP",  # Ontologia biológica (por exemplo, BP para Processos Biológicos)
pvalueCutoff = 0.05,
verbose = TRUE
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- gseGO(
geneList = "D:/PROJETOS-HSL_BP/SeuArquivoDeAnotacao.gmt",
ont = "BP",  # Ontologia biológica (por exemplo, BP para Processos Biológicos)
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- clusterProfiler::gseaplot2(
geneList = "D:/PROJETOS-HSL_BP/SeuArquivoDeAnotacao.gmt",
ont = "BP",  # Ontologia biológica (por exemplo, BP para Processos Biológicos)
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- clusterProfiler::gseaplot2(
geneList = "D:/PROJETOS-HSL_BP/SeuArquivoDeAnotacao.gmt",
# ont = "BP",  # Ontologia biológica (por exemplo, BP para Processos Biológicos)
pvalueCutoff = 0.05
)
# Realize a análise de enriquecimento funcional
resultado_enriquecimento <- clusterProfiler::gseaplot(
geneList = "D:/PROJETOS-HSL_BP/SeuArquivoDeAnotacao.gmt",
# ont = "BP",  # Ontologia biológica (por exemplo, BP para Processos Biológicos)
pvalueCutoff = 0.05
)
library(data.table)
library(xlsx)
library(dplyr)
library(tidyr)
library(reshape2)
library(maftools)
library(ggplot2)
library(ggpubr)
library(stringr)
library(pheatmap)
library(StructuralVariantAnnotation)
library(data.table)
library(xlsx)
library(dplyr)
library(tidyr)
library(reshape2)
library(maftools)
library(ggplot2)
library(ggpubr)
library(stringr)
library(pheatmap)
library(StructuralVariantAnnotation)
install.packages("rlang")
install.packages("rlang")
library(StructuralVariantAnnotation)
install.packages("rlang")
install.packages("rlang")
install_version("rlang", version = "1.0.1", repos = "http://cran.us.r-project.org")
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
install_version("rlang", version = "1.1.1", repos = "http://cran.us.r-project.org")
library(devtools)
library(devtools)
install_version("rlang", version = "1.1.1", repos = "http://cran.us.r-project.org")
library(rlang)
install_version("rlang", version = "1.1.1", repos = "http://cran.us.r-project.org")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("D:/Users/cleci/OneDrive/Downloads/rlang_1.1.1.tar.gz", repos = NULL, type = "source")
library(StructuralVariantAnnotation)
R version
R
version
update
update(R)
update()
library(data.table)
library(xlsx)
library(dplyr)
library(tidyr)
library(reshape2)
library(maftools)
library(ggplot2)
library(ggpubr)
library(stringr)
library(pheatmap)
library(StructuralVariantAnnotation)
library(data.table)
library(xlsx)
library(dplyr)
library(tidyr)
library(reshape2)
library(maftools)
library(ggplot2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
library(data.table)
library(dplyr)
library(reshape2)
library(tidyr)
library(stringr)
library(ggplot2)
library(devtools)
library(data.table)
library(dplyr)
library(reshape2)
library(tidyr)
library(stringr)
library(ggplot2)
library(devtools)
library(dndscv)
library(ggpubr)
library(xlsx)
library(maftools)
library(pheatmap)
library(pROC)
library(data.table)
library(xlsx)
library(dplyr)
library(tidyr)
library(reshape2)
library(maftools)
library(ggplot2)
library(ggpubr)
library(stringr)
library(pheatmap)
wd <- "D:/Github-Projects/Pipeline_Gatk-Mutect2/"
setwd(wd)
genes<-fread("output-Mutect2_SomaticFilters.2023-09-26/genesRamon.txt")
View(genes)
genes<-fread("output-Mutect2_SomaticFilters.2023-09-26/genesRamon.txt", header = F)
View(genes)
somatic_mutation <-fread("output-Mutect2_SomaticFilters.2023-09-26/somatic_mutation.69samples.tsv")
View(somatic_mutation)
tab<-subset(somatic_mutation, Gene.refGene %in% genes$V1 )
View(tab)
tab<-subset(somatic_mutation, Gene.refGene %in% genes$V1, select = c(1,2) )
View(somatic_mutation)
tab<-subset(somatic_mutation, Gene.refGene %in% genes$V1)
tab<-subset(somatic_mutation, Gene.refGene %in% genes$V1, select = c(1:9,11,12) )
fwrite(tab, "output-Mutect2_SomaticFilters.2023-09-26/mut-genesRamon.txt", quote = F, sep = "\t", col.names = T, row.names = F)
fwrite(tab, "mut-genesRamon.tsv", quote = F, sep = "\t", col.names = T, row.names = F)
fwrite(tab, "mut-genesRamon.tsv", quote = F, sep = "\t", col.names = T, row.names = F)
View(tab)
wd <- "D:/Github-Projects/Pipeline_Gatk-Mutect2/"
setwd(wd)
genes<-fread("genesRamon.txt", header = F)
somatic_mutation <-fread("output-Mutect2_SomaticFilters.2023-09-26/somatic_mutation.69samples.tsv")
tab<-subset(somatic_mutation, Gene.refGene %in% genes$V1, select = c(1:9,11,12) )
View(tab)
fwrite(tab, "mut-genesRamon.tsv", quote = F, sep = "\t", col.names = T, row.names = F)
fwrite(tab, "mut-genesRamon.tsv", quote = F, sep = "\t", col.names = T, row.names = F)
