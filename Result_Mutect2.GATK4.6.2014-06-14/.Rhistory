colnames(Tab.toMATH)[names(Tab.toMATH)=="Chr"]<-"Chromosome"
colnames(Tab.toMATH)[names(Tab.toMATH)=="Start"]<-"Start_Position"
colnames(Tab.toMATH)[names(Tab.toMATH)=="AAChange.refGene"]<-"AAChange"
colnames(Tab.toMATH)[names(Tab.toMATH)=="End"]<-"End_Position"
colnames(Tab.toMATH)[names(Tab.toMATH)=="ExonicFunc.refGene"]<-"Variant_Classification"
Tab.toMATH$Variant_Type<-"ExonicFunc.refGene"
colnames(Tab.toMATH)[names(Tab.toMATH)=="EXOME_ID"]<-"Tumor_Sample_Barcode"
clinicalData.samples <- as.data.frame(unique(Tab.toMATH$Tumor_Sample_Barcode))
colnames(clinicalData.samples) <- "Tumor_Sample_Barcode"
tcga.ab.3009.het = inferHeterogeneity(maf = maf.Tab.toMATH,
tsb = 'ROP-1-ExC85-xgenV2_S7', vafCol = "VAF" )
maf.Tab.toMATH
View(maf.Tab.toMATH)
tcga.ab.3009.het = inferHeterogeneity(maf = Tab.toMATH,
tsb = 'ROP-1-ExC85-xgenV2_S7', vafCol = "VAF" )
tcga.ab.2972.het = inferHeterogeneity(maf = Tab.toMATH,
tsb = 'ROP-1-ExC85-xgenV2_S7',
vafCol = 'i_TumorVAF_WU',)
maf.Tab.toMATH = read.maf(maf = Tab.toMATH,
clinicalData = clinicalData.samples,
vc_nonSyn = unique(Tab.toMATH$Variant_Classification),
verbose = F)
unique(Tab.toMATH$Variant_Classification)
tcga.ab.2972.het = inferHeterogeneity(maf = maf.Tab,
tsb = 'ROP-1-ExC85-xgenV2_S7',
vafCol = 'VAF')
my.math <- math.score(maf = maf.Tab.toMATH, vafCol = 'VAF', )
my.math
View(my.math)
tcga.ab.2972.het = inferHeterogeneity(maf = maf.Tab.toMATH,
tsb = 'ROP-1-ExC85-xgenV2_S7',
vafCol = 'VAF')
unique(maf.Tab.toMATH@data$Tumor_Sample_Barcode)
tcga.ab.2972.het = inferHeterogeneity(maf = maf.Tab.toMATH,
tsb = 'ROP-1',
vafCol = 'VAF')
tcga.ab.2972.het
tcga.ab.2972.het = inferHeterogeneity(maf = maf.Tab.toMATH,
vafCol = 'VAF')
ROP.het = inferHeterogeneity(maf = maf.Tab.toMATH,
vafCol = 'VAF')
ROP.het = inferHeterogeneity(maf = maf.Tab.toMATH,
vafCol = 'VAF')
View(ROP.het)
View(ROP.het$clusterMeans)
View(ROP.het$clusterData)
#Visualizing results. Highlighting those variants on copynumber altered variants.
plotClusters(clusters = ROP.het, genes = 'CN_altered', showCNvars = TRUE)
getClinicalData(maf.Tab.toMATH)
getClinicalData(maf.Tab)
laml.mutsig.corrected = prepareMutSig(maf = my.math)
laml.mutsig.corrected = prepareMutSig(maf = maf.Tab.toMATH)
laml.mutsig.corrected
View(laml.mutsig.corrected)
plotmafSummary(maf = maf.Tab.toMATH, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
maf.Tab.toMATH@gene.summary
unique(maf.Tab.toMATH@data$Variant_Classification)
table(maf.Tab.toMATH@data$Variant_Classification)
plotmafSummary(maf = maf.Tab.toMATH, rmOutlier = TRUE, addStat = 'median',
dashboard = TRUE, titvRaw = FALSE)
laml.titv = titv(maf = maf.Tab.toMATH, plot = FALSE, useSyn = TRUE)
laml.titv = titv(maf = maf.Tab.toMATH, plot = FALSE, useSyn = F)
table(maf.Tab.toMATH@data$Variant_Type)
rop_all <- fread(file="Final_GATK.4.6_annotated.txt", header=T, sep="\t", na.strings=c(".","NA"), fill=TRUE, check.names = FALSE)
rop.1 = annovarToMaf(annovar = "ROP-1-ExC85-xgenV2_S7.hg38_multianno.txt", Center = 'CSI-NUS', refBuild = 'hg38',
tsbCol = 'Tumor_Sample_Barcode', table = 'refGene', )
rop.all = annovarToMaf(annovar = "Final_GATK.4.6_annotated.txt", Center = 'ROP', refBuild = 'hg38',
tsbCol = 'Tumor_Sample_Barcode', table = 'refGene', )
View(rop_all)
View(rop_all)
View(rop.all)
View(rop_all)
length(unique(rop.all$sample_id))
length(unique(rop.all$`ROP-112-ExC85-xgenV2_S75`))
length(unique(rop.all$Variant_Type))
(unique(rop.all$Variant_Type))
(unique(rop.all$ref_alt))
(unique(rop.all$`ROP-112-ExC85-xgenV2_S75`))
rop.somatic = annovarToMaf(annovar = "output-Step1/somatic_variants.CodRegion.tsv", Center = 'CSI-NUS', refBuild = 'hg38',
tsbCol = 'Tumor_Sample_Barcode', table = 'refGene', )
somatic_Var.CodRegion<-as.data.frame(fread(paste0(output,"somatic_variants.CodRegion.tsv"), header = T,  na.strings=c("NA"), fill=TRUE, check.names = FALSE))
dim(somatic_Var.CodRegion)
dim(rop.somatic)
somatic_Var.CodRegion<-as.data.frame(fread(paste0(output,"somatic_variants.CodRegion.tsv"), header = T,  na.strings=c("NA"), fill=TRUE, check.names = FALSE))
rop.somatic = annovarToMaf(annovar = "output-Step1/somatic_variants.CodRegion.tsv", Center = 'CSI-NUS', refBuild = 'hg38',
tsbCol = 'Tumor_Sample_Barcode', table = 'refGene', )
dim(somatic_Var.CodRegion)
dim(rop.somatic)
View(rop.somatic)
table(rop.somatic$Variant_Type)
length(rop.somatic$index )
length(somatic_Var.CodRegion$index )
View(somatic_Var.CodRegion)
View(rop.somatic)
View(as.data.frame(table(rop.somatic[, c(14:17)]))
)
View(as.data.frame(table(rop.somatic[, c(14:17)]))))
View(as.data.frame(table(rop.somatic[, c(14:17)])))
teste<-(as.data.frame(table(rop.somatic[, c(14:17)])))
teste<-(table(rop.somatic[, c(14:17)])
)
teste<-(as.data.frame((rop.somatic[, c(14:17)])))
View(teste)
grep(x = teste$Gene.refGene, pattern = ";" )
toremove<-grep(x = teste$Gene.refGene, pattern = ";" )
teste2<-teste[-toremove,]
View(teste2)
teste2<-teste[toremove,]
View(table(teste2$index))
teste<-(as.data.frame((rop.somatic[, c(6:11,17:20)])))
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(stringr)
library(tidyr)
library(survminer)
library(survival)
library(coin)
library(knitr)
library(kableExtra)
library(forestmodel)
library(car)
library(rcompanion)
library(rstatix)
setwd(dir = "D:\Github-Projects/ISbe/")
setwd(dir = "D:\Github-Projects/ISbe/")
setwd(dir = "D:/Github-Projects/ISbe/")
clinical <- read.csv(file = "Chatilla_clinicaldata_06_05_24.xlsx - rectal_msk_2022_clinical_data.csv",
header = TRUE)
clinical <- read.csv(file = "scripts/Chatilla_clinicaldata_06_05_24.xlsx - rectal_msk_2022_clinical_data.csv",
header = TRUE)
cibersort_output <- read.csv(file = "scripts/CIBERSORTx_Job7_Results.csv",
header = TRUE)
IG_CMS <- read.table(file = "CMS_IGs.csv",
header = TRUE, sep = "\t")
IG_CMS <- read.table(file = "scripts/CMS_IGs.csv",
header = TRUE, sep = "\t")
table(clinical$Has.RNASeq) # n > 144, ou seja temos duplicatas nos dados de RNAseq (filtrar!)
clinical_filtered <- subset(clinical, Has.RNASeq == 1) # Filtrando para pacientes que possuem RNAseq
table(clinical_filtered$Has.RNASeq) #filtrados os RNAseq, agora filtrar as duplicatas
duplicated_ids <- clinical_filtered$Patient.ID[duplicated(clinical_filtered$Patient.ID)] #identificando IDs duplicados
unique_duplicated_ids <- unique(duplicated_ids) #unique = duplicated, ou seja existem somente duplicatas e nÃ£o triplicatas etc...
print(unique_duplicated_ids)
table(clinical_filtered$Patient.ID) #visao geral dos pacientes duplicados X nao duplicados
clinical_filtered %>%
select(Patient.ID, Sample.ID) %>%
slice_head(n = 25) %>%
print()
clinical_filtered <- clinical_filtered %>%
group_by(Patient.ID) %>%
filter(!(grepl("WES", Sample.ID) & (any(grepl("IM3", Sample.ID)) | any(grepl("IM5", Sample.ID))))) %>%
ungroup()
print(clinical_filtered)
nrow(clinical_filtered) #n = 114, exato numero de pacientes que passaram por RNAseq na coorte chatilla
# Excluir grupo IG4
clinical_filtered <- clinical_filtered[clinical_filtered$Molecular.Subtype != "MSI",]
nrow(clinical_filtered) #n = 109, exato numero de pacientes que passaram por RNAseq na coorte chatilla
cibersort_output_CD3_CD8 <- transform(cibersort_output,
CD3 = rowSums(cibersort_output[, c("T.cells.CD8", "T.cells.CD4.naive",
"T.cells.CD4.memory.resting", "T.cells.CD4.memory.activated",
"T.cells.follicular.helper", "T.cells.regulatory..Tregs.",
"T.cells.gamma.delta")], na.rm = TRUE),
CD8 = cibersort_output$T.cells.CD8)
cibersort_output_CD3_CD8 <- subset(cibersort_output_CD3_CD8, Mixture %in% clinical_filtered$Patient.ID )
print(head(cibersort_output_CD3_CD8, 5)) #Doublecheck na conta
compute_percentile <- function(column) {
if (!is.numeric(column)) {
stop("Input precisa ser numerico!")
}
return(ecdf(column)(column) * 100)
}
cibersort_output_CD3_CD8$CD3_percentile <- compute_percentile(cibersort_output_CD3_CD8$CD3)
cibersort_output_CD3_CD8$CD8_percentile <- compute_percentile(cibersort_output_CD3_CD8$CD8)
ecdf_CD3 <- ecdf(cibersort_output_CD3_CD8$CD3)
ecdf_CD8 <- ecdf(cibersort_output_CD3_CD8$CD8)
manual_CD3_percentile <- ecdf_CD3(cibersort_output_CD3_CD8$CD3[2]) * 100
manual_CD8_percentile <- ecdf_CD8(cibersort_output_CD3_CD8$CD8[2]) * 100
print(paste("Manual CD3 Percentile:", manual_CD3_percentile))
print(paste("Manual CD8 Percentile:", manual_CD8_percentile))
computed_CD3_percentile <- cibersort_output_CD3_CD8$CD3_percentile[2]
computed_CD8_percentile <- cibersort_output_CD3_CD8$CD8_percentile[2]
print(paste("Computed CD3 Percentile:", computed_CD3_percentile))
print(paste("Computed CD8 Percentile:", computed_CD8_percentile))
if (identical(manual_CD3_percentile, computed_CD3_percentile) &&
identical(manual_CD8_percentile, computed_CD8_percentile)) {
print("Funcionou! Ambos os percentis sao correspondentes")
} else {
print("Nao deu certo! =/")
}
cibersort_output_CD3_CD8$Mean_percentiles <- (cibersort_output_CD3_CD8$CD3_percentile + cibersort_output_CD3_CD8$CD8_percentile) /2
print(head(cibersort_output_CD3_CD8, 5))
cibersort_output_CD3_CD8$ISBE_classification <- cut(
cibersort_output_CD3_CD8$Mean_percentiles,
breaks = c(-Inf, 25, 70, Inf),
labels = c("Low", "Intermediate", "High"),
right = FALSE
)
print(head(cibersort_output_CD3_CD8, 3))
table(cibersort_output_CD3_CD8$ISBE_classification)
custom_colors <- c("Low" = "#00274D", "Intermediate" = "#407BB3", "High" = "#23BEF0")
ggplot(cibersort_output_CD3_CD8, aes(x = ISBE_classification, fill = ISBE_classification)) +
geom_bar() +
scale_fill_manual(values = custom_colors) +
labs(
title = "Distribution of ISBE Classification",
x = "ISBE Classification",
y = "Frequency",
fill = "ISBE Classification"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
relevant_columns <- c("Mixture", "CD3", "CD8", "CD3_percentile", "CD8_percentile",
"Mean_percentiles", "ISBE_classification")
relevant_columns <- c("Mixture", "CD3", "CD8", "CD3_percentile", "CD8_percentile",
"Mean_percentiles", "ISBE_classification")
set.seed(123)
ggplot(cibersort_output_CD3_CD8, aes(x = ISBE_classification, fill = ISBE_classification)) +
geom_bar() +
scale_fill_manual(values = custom_colors) +
labs(
title = "Distribution of ISBE Classification",
x = "ISBE Classification",
y = "Frequency",
fill = "ISBE Classification"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
ggplot(cibersort_output_CD3_CD8, aes(x = ISBE_classification, fill = ISBE_classification)) +
geom_bar() +
scale_fill_manual(values = custom_colors) +
labs(
title = "Distribution of ISBE Classification",
x = "ISBE Classification",
y = "Frequency",
fill = "ISBE Classification"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
ggplot(cibersort_output_CD3_CD8, aes(x = ISBE_classification, fill = ISBE_classification)) +
geom_bar() +
scale_fill_manual(values = custom_colors) +
labs(
title = "Distribution of ISBE Classification",
x = "ISBE Classification",
y = "Frequency",
fill = "ISBE Classification"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
relevant_columns <- c("Mixture", "CD3", "CD8", "CD3_percentile", "CD8_percentile",
"Mean_percentiles", "ISBE_classification")
set.seed(123)
low_samples <- cibersort_output_CD3_CD8[cibersort_output_CD3_CD8$ISBE_classification == "Low", ][sample(1:nrow(cibersort_output_CD3_CD8[cibersort_output_CD3_CD8$ISBE_classification == "Low", ]), 5), ]
intermediate_samples <- cibersort_output_CD3_CD8[cibersort_output_CD3_CD8$ISBE_classification == "Intermediate", ][sample(1:nrow(cibersort_output_CD3_CD8[cibersort_output_CD3_CD8$ISBE_classification == "Intermediate", ]), 5), ]
high_samples <- cibersort_output_CD3_CD8[cibersort_output_CD3_CD8$ISBE_classification == "High", ][sample(1:nrow(cibersort_output_CD3_CD8[cibersort_output_CD3_CD8$ISBE_classification == "High", ]), 5), ]
sampled_data <- rbind(low_samples, intermediate_samples, high_samples)
sampled_data <- sampled_data[, relevant_columns]
kable(sampled_data, col.names = c("Mixture", "CD3", "CD8", "CD3 Percentile", "CD8 Percentile", "Mean Percentiles", "ISBE Classification"),
caption = "Representative Sample of Patients with ISBE Classification") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
clinical_filtered %>%
select(Patient.ID, DFS.months.from.neo, DFS.status.from.neo,
Overall.Survival.Neo, Overall.Survival.Status) %>%
head(5) %>%
print()
cibersort_output_CD3_CD8 %>%
select(Mixture, ISBE_classification) %>%
head(5) %>%
print()
ISBE_merged <- merge(clinical_filtered, cibersort_output_CD3_CD8, by.x = "Patient.ID", by.y = "Mixture") # n=110 why?, 3 TPM + 1 GEO ID
print(ISBE_merged$Patient.ID)
table(ISBE_merged$Overall.Survival.Status)
table(ISBE_merged$DFS.status.from.neo)
ISBE_merged$Overall.Survival.Status <- as.numeric(gsub("([0-9]+):.*", "\\1", ISBE_merged$Overall.Survival.Status))
ISBE_merged$DFS.status.from.neo <- as.numeric(gsub("([0-9]+):.*", "\\1", ISBE_merged$DFS.status.from.neo))
table(ISBE_merged$Overall.Survival.Status)
table(ISBE_merged$DFS.status.from.neo)
na_counts <- sapply(ISBE_merged[, c('DFS.months.from.neo', 'DFS.status.from.neo', 'Overall.Survival.Neo', 'Overall.Survival.Status')], function(x) sum(is.na(x)))
print(na_counts) #N total OS = 110 - 3 = 107; N total DFS = 110 - 4 = 106
summary_table_os <- ISBE_merged %>%
filter(!is.na(Overall.Survival.Neo)) %>%
group_by(ISBE_classification) %>%
summarise(
count = n(),
mean_OS = mean(Overall.Survival.Neo, na.rm = TRUE),
median_OS = median(Overall.Survival.Neo, na.rm = TRUE),
min_OS = min(Overall.Survival.Neo, na.rm = TRUE),
max_OS = max(Overall.Survival.Neo, na.rm = TRUE)
)
summary_table_dfs <- ISBE_merged %>%
filter(!is.na(DFS.months.from.neo)) %>%
group_by(ISBE_classification) %>%
summarise(
count = n(),
mean_DFS = mean(DFS.months.from.neo, na.rm = TRUE),
median_DFS = median(DFS.months.from.neo, na.rm = TRUE),
min_DFS = min(DFS.months.from.neo, na.rm = TRUE),
max_DFS = max(DFS.months.from.neo, na.rm = TRUE)
)
kable(summary_table_os, col.names = c("ISBE Classification", "Count", "Mean OS", "Median OS", "Min OS", "Max OS"),
caption = "Summary of Overall Survival by ISBE Classification") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
add_header_above(c(" " = 1, "Overall Survival (months)" = 5)) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2:6, background = "white", color = "black")
kable(summary_table_dfs, col.names = c("ISBE Classification", "Count", "Mean DFS", "Median DFS", "Min DFS", "Max DFS"),
caption = "Summary of Disease-Free Survival by ISBE Classification") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
add_header_above(c(" " = 1, "Disease-Free Survival (months)" = 5)) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2:6, background = "white", color = "black")
surv_object <- Surv(time = ISBE_merged$Overall.Survival.Neo, event = ISBE_merged$Overall.Survival.Status)
fit <- survfit(surv_object ~ ISBE_classification, data = ISBE_merged)
pairwise_results <- pairwise_survdiff(Surv(Overall.Survival.Neo, Overall.Survival.Status) ~ ISBE_classification, data = ISBE_merged)
plot_OS <- ggsurvplot(
fit,
data = ISBE_merged,
pval = TRUE,
risk.table = TRUE,
conf.int = FALSE,
ggtheme = theme_minimal(),
palette = c("Low" = "#00274D", "Intermediate" = "#407BB3", "High" = "#23BEF0"),
title = "Overall Survival from Neoadjuvancy",
xlab = "Time (months)",
ylab = "Survival Probability",
legend.title = "ISBE Classification",
legend.labs = c("Low", "Intermediate", "High"),
risk.table.title = "Number at Risk",
risk.table.y.text.col = TRUE,
risk.table.y.text = FALSE,
risk.table.height = 0.25,
break.time.by = 20,
xlim = c(0, 200),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain")
)
print(pairwise_results)
print(plot_OS)
print(pairwise_results)
print(pairwise_results$p.value)
print(pairwise_results$method)
surv_object_dfs <- Surv(time = ISBE_merged$DFS.months.from.neo, event = ISBE_merged$DFS.status.from.neo)
fit_dfs <- survfit(surv_object_dfs ~ ISBE_classification, data = ISBE_merged)
pairwise_results_dfs <- pairwise_survdiff(Surv(DFS.months.from.neo, DFS.status.from.neo) ~ ISBE_classification, data = ISBE_merged)
plot_dfs <- ggsurvplot(
fit_dfs,
data = ISBE_merged,
pval = TRUE,
risk.table = TRUE,
conf.int = FALSE,
ggtheme = theme_minimal(),
palette = c("Low" = "#00274D", "Intermediate" = "#407BB3", "High" = "#23BEF0"),
title = "Disease-Free Survival from Neoadjuvancy",
xlab = "Time (months)",
ylab = "Survival Probability",
legend.title = "ISBE Classification",
legend.labs = c("Low", "Intermediate", "High"),
risk.table.title = "Number at Risk",
risk.table.y.text.col = TRUE,
risk.table.y.text = FALSE,
risk.table.height = 0.25,
break.time.by = 20,
xlim = c(0, 200),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain")
)
print(pairwise_results_dfs)
print(plot_dfs)
ISBE_merged_treatment <- ISBE_merged %>%
select(Patient.ID, pCR, cCR,
Response...pCR.OR.cCR,
Response...pCR.OR.cCR.1,
ISBE_classification) #hÃ¡ como subdividir em pcr ou ccr, mas fica um pouco confuso, checar paciente JM116
ISBE_merged_treatment$ISBE_classification <- factor(ISBE_merged_treatment$ISBE_classification, levels = c("High", "Intermediate", "Low"))
ISBE_merged_treatment$Response...pCR.OR.cCR <- factor(ISBE_merged_treatment$Response...pCR.OR.cCR, levels = c("0", "1"))
summary_data <- ISBE_merged_treatment %>%
filter(!is.na(Response...pCR.OR.cCR)) %>%
group_by(Response...pCR.OR.cCR, ISBE_classification) %>%
summarise(count = n()) %>%
group_by(Response...pCR.OR.cCR) %>%
mutate(percentage = count / sum(count) * 100)
na_counts_treatment <- sapply(ISBE_merged_treatment[, c('Response...pCR.OR.cCR', 'ISBE_classification')], function(x) sum(is.na(x)))
print(na_counts_treatment) #5 pacientes nao possuem dado de resposta, porntanto n = 105
kable(summary_data, col.names = c("Response", "ISBE Classification", "Count", "Percentage"),
caption = "Summary of ISBE Classification by Response to Treatment") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1:2, bold = TRUE) %>%
column_spec(3:4, background = "white", color = "black")
custom_colors <- c("Low" = "#00274D", "Intermediate" = "#407BB3", "High" = "#23BEF0")
ggplot(summary_data, aes(x = Response...pCR.OR.cCR, y = percentage, fill = ISBE_classification)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = custom_colors) +
labs(x = "Response to Treatment", y = "Percentage", fill = "ISBE Classification") +
ggtitle("ISBE Classification by Response to Treatment") +
scale_x_discrete(labels = c("0" = "Non-responders", "1" = "Responders")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 12, face = "bold")
) +
annotate("text", x = 1.4, y = 104, label = "p-value = 0.3297", hjust = 0) +
annotate("text", x = 0.95, y = -1.7, label = "n = 67", hjust = 0) +
annotate("text", x = 1.95, y = -1.7, label = "n = 23", hjust = 0)
contingency_table <- table(ISBE_merged_treatment$Response...pCR.OR.cCR, ISBE_merged_treatment$ISBE_classification)
chi_test <- chisq.test(contingency_table)
print(contingency_table)
print(chi_test)
library(data.table)
library(stringr)
library(dplyr)
library(reshape2)
library(tidyr)
library(ggplot2)
library(devtools)
library(dndscv)
library(ggpubr)
library(xlsx)
library(maftools)
library(pheatmap)
library(pROC)
wd <- "D:/Github-Projects/Pipeline_Gatk-Mutect2/Result_Mutect2.GATK4.6.2014-07-28/"
setwd(wd)
wd <- "D:/Github-Projects/Pipeline_Gatk-Mutect2/Result_Mutect2.GATK4.6.2014-06-14/"
setwd(wd)
dir.create("output-2024-07-28")
output <- "output-2024-07-28/"
#==============================================================================#
# Dataset reorganization ####
#==============================================================================#
all_variants <- fread(file="Final_GATK.4.6_annotated.txt", header=T, sep="\t", na.strings=c(".","NA"), fill=TRUE, check.names = FALSE)
View(all_variants)
all_variants<-all_variants[all_variants$Chr != "Chr"]
all_variants <- all_variants[, -c("Otherinfo1","Otherinfo2","Otherinfo3")]
#==============================================================================#
# Dataset reorganization ####
#==============================================================================#
all_variants <- fread(file="Final_GATK.4.6_annotated.txt", header=T, sep="\t", na.strings=c(".","NA"), fill=TRUE, check.names = FALSE)
all_variants<-all_variants[all_variants$Chr != "Chr"]
#==============================================================================#
# Dataset reorganization ####
#==============================================================================#
all.annovar = annovarToMaf(annovar = "Final_GATK.4.6_annotated.txt",
Center = 'ROP', refBuild = 'hg38',
tsbCol = 'Tumor_Sample_Barcode', table = 'refGene', )
#==============================================================================#
# Dataset reorganization ####
#==============================================================================#
all.annovar = annovarToMaf(annovar = "Final_GATK.4.6_annotated.txt",
refBuild= 'hg38', tsbCol= 'Tumor_Sample_Barcode', table= 'refGene', )
View(all.annovar)
View(all_variants)
can_hs_tbl = maftools::cancerhotspots(
bam = "Tumor.bam",
refbuild = "GRCh37",
mapq = 10,
sam_flag = 1024
)
shiny::runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
install.packages("DT")
runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
runApp('D:/PROJETOS-HSL_BP/Projeto_HLA_database')
